{"ast":null,"code":"const acquistaVeicolo = async (tipo, id) => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    toast.error(\"Token mancante. Effettua il login.\");\n    return;\n  }\n  const payload = {\n    acquistiBean: {}\n  };\n  if (tipo === \"auto\") payload.acquistiBean.extAutoId = id;else if (tipo === \"moto\") payload.acquistiBean.extMotoId = id;else if (tipo === \"tir\") payload.acquistiBean.extTirId = id;\n  mostraToastConferma(\"Confermi l'acquisto di questo veicolo?\", async () => {\n    try {\n      const res = await axios.post(\"/acquisti/insertAcquisto\", payload, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const data = res.data;\n      if (data.errorCode === 0) {\n        toast.success(\"✅ Acquisto completato!\");\n      } else {\n        toast.error(`❌ ${data.errorMessage || \"Errore durante l'acquisto\"}`);\n      }\n    } catch (err) {\n      console.error(err);\n      toast.error(\"❌ Errore di rete durante l'acquisto\");\n    }\n  });\n};","map":{"version":3,"names":["acquistaVeicolo","tipo","id","token","localStorage","getItem","toast","error","payload","acquistiBean","extAutoId","extMotoId","extTirId","mostraToastConferma","res","axios","post","headers","Authorization","data","errorCode","success","errorMessage","err","console"],"sources":["C:/Vroom/VroomERPFE/src/api/acquistoUtils.ts"],"sourcesContent":["const acquistaVeicolo = async (tipo: 'auto' | 'moto' | 'tir', id: number) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n      toast.error(\"Token mancante. Effettua il login.\");\r\n      return;\r\n    }\r\n  \r\n    const payload: any = { acquistiBean: {} };\r\n    if (tipo === \"auto\") payload.acquistiBean.extAutoId = id;\r\n    else if (tipo === \"moto\") payload.acquistiBean.extMotoId = id;\r\n    else if (tipo === \"tir\") payload.acquistiBean.extTirId = id;\r\n  \r\n    mostraToastConferma(\"Confermi l'acquisto di questo veicolo?\", async () => {\r\n      try {\r\n        const res = await axios.post(\"/acquisti/insertAcquisto\", payload, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n  \r\n        const data = res.data;\r\n        if (data.errorCode === 0) {\r\n          toast.success(\"✅ Acquisto completato!\");\r\n        } else {\r\n          toast.error(`❌ ${data.errorMessage || \"Errore durante l'acquisto\"}`);\r\n        }\r\n      } catch (err) {\r\n        console.error(err);\r\n        toast.error(\"❌ Errore di rete durante l'acquisto\");\r\n      }\r\n    });\r\n  };\r\n  \r\n"],"mappings":"AAAA,MAAMA,eAAe,GAAG,MAAAA,CAAOC,IAA6B,EAAEC,EAAU,KAAK;EACzE,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE;IACVG,KAAK,CAACC,KAAK,CAAC,oCAAoC,CAAC;IACjD;EACF;EAEA,MAAMC,OAAY,GAAG;IAAEC,YAAY,EAAE,CAAC;EAAE,CAAC;EACzC,IAAIR,IAAI,KAAK,MAAM,EAAEO,OAAO,CAACC,YAAY,CAACC,SAAS,GAAGR,EAAE,CAAC,KACpD,IAAID,IAAI,KAAK,MAAM,EAAEO,OAAO,CAACC,YAAY,CAACE,SAAS,GAAGT,EAAE,CAAC,KACzD,IAAID,IAAI,KAAK,KAAK,EAAEO,OAAO,CAACC,YAAY,CAACG,QAAQ,GAAGV,EAAE;EAE3DW,mBAAmB,CAAC,wCAAwC,EAAE,YAAY;IACxE,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,0BAA0B,EAAER,OAAO,EAAE;QAChES,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUf,KAAK;QAChC;MACF,CAAC,CAAC;MAEF,MAAMgB,IAAI,GAAGL,GAAG,CAACK,IAAI;MACrB,IAAIA,IAAI,CAACC,SAAS,KAAK,CAAC,EAAE;QACxBd,KAAK,CAACe,OAAO,CAAC,wBAAwB,CAAC;MACzC,CAAC,MAAM;QACLf,KAAK,CAACC,KAAK,CAAC,KAAKY,IAAI,CAACG,YAAY,IAAI,2BAA2B,EAAE,CAAC;MACtE;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACjB,KAAK,CAACgB,GAAG,CAAC;MAClBjB,KAAK,CAACC,KAAK,CAAC,qCAAqC,CAAC;IACpD;EACF,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}